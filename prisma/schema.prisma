// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String?
  password   String
  accounts   Account[]
  budgets    Budget[]
  createdAt DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Account {
  id               Int               @id @default(autoincrement())
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  accountName      String
  accountType      String
  balance          Float
  currency         String
  categories       AccountCategory[]
  historyTransacts HistoryTransact[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model HistoryTransact {
  id              Int       @id @default(autoincrement())
  accountId       Int
  account         Account   @relation(fields: [accountId], references: [id])
  transactionType String
  amount          Decimal   @db.Decimal(15, 3)
  date            DateTime  @default(now())
  description     String?
  createdAt       DateTime  @default(now())
}

model Budget {
  id         Int              @id @default(autoincrement())
  userId     Int
  user       User             @relation(fields: [userId], references: [id])
  name       String
  amount     Decimal          @db.Decimal(15, 3)
  categories BudgetCategory[]
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String
  budgets   BudgetCategory[]
  accounts  AccountCategory[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model BudgetCategory {
  budgetId   Int
  categoryId Int
  budget     Budget   @relation(fields: [budgetId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([budgetId, categoryId])
}

model AccountCategory {
  accountId  Int
  categoryId Int
  account    Account  @relation(fields: [accountId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([accountId, categoryId])
}
